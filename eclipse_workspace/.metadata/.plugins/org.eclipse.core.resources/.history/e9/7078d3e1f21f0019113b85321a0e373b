/*
 * dm03_maskbit.cpp
 *
 *  Created on: Jan 24, 2019
 *      Author: lisujia
 */


#include "opencv2/opencv.hpp"
#include <iostream>
#include <cmath>

using namespace cv;
using namespace std;

int test_dm03() {
	Mat src, dst;
	src = cv::imread("/Users/lisujia/Desktop/test.jpg", ImreadModes::IMREAD_COLOR);

	if (!src.data) {
		cout << "can't load image" << endl;
		return -1;
	}

	namedWindow("Display Image", WINDOW_AUTOSIZE);
	imshow("Display Image", src);

	waitKey(0);

	int cols = (src.cols - 1) * src.channels();
	int col_step = src.channels();
	int rows = src.rows - 1;
	dst = Mat::zeros(src.size(), src.type());

//	[0 -1 0]
//	[-1 5 -1]
//	[0 -1 0]
	for (int i = 1; i < rows; i++) {
		uchar *pre_row = src.ptr(i - 1);
		uchar *cur_row = src.ptr(i);
		uchar *nxt_row = src.ptr(i + 1);
		uchar *output = dst.ptr(i);
		for (int j = col_step; j < cols; j+=col_step) {
			uchar top_b = pre_row[j];
			uchar top_g = pre_row[j + 1];
			uchar top_r = pre_row[j + 2];

			uchar left_b = cur_row[j - 1];
			uchar left_g = cur_row[j - 1 + 1];
			uchar left_r = cur_row[j - 1 + 2];

			uchar right_b = cur_row[j + 1];
			uchar right_g = cur_row[j + 1 + 1];
			uchar right_r = cur_row[j + 1 + 2];

			uchar down_b = nxt_row[j + 1];
			uchar down_g = nxt_row[j + 1 + 1];
			uchar down_r = nxt_row[j + 1 + 2];

			uchar center_b = cur_row[j];
			uchar center_g = cur_row[j + 1];
			uchar center_r = cur_row[j + 2];


			cur_row[j] = cv::saturate_cast<uchar>(5 * center_b - top_b - left_b - right_b - down_b);
			cur_row[j + 1] = cv::saturate_cast<uchar>(5 * center_g - top_g - left_g - right_g - down_g);
			cur_row[j + 2] = cv::saturate_cast<uchar>(5 * center_r - top_r - left_r - right_r - down_r);
		}
	}
	imshow("Display Image", src);
	waitKey(0);
	return 0;
}
